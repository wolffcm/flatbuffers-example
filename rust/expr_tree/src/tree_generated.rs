// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod tree {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum Node {
  NONE = 0,
  BinOp = 1,
  Constant = 2,

}

const ENUM_MIN_NODE: u8 = 0;
const ENUM_MAX_NODE: u8 = 2;

impl<'a> flatbuffers::Follow<'a> for Node {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for Node {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const Node;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const Node;
    unsafe { *p }
  }
}

impl flatbuffers::Push for Node {
    type Output = Node;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<Node>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_NODE:[Node; 3] = [
  Node::NONE,
  Node::BinOp,
  Node::Constant
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_NODE:[&'static str; 3] = [
    "NONE",
    "BinOp",
    "Constant"
];

pub fn enum_name_node(e: Node) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_NODE[index as usize]
}

pub struct NodeUnionTableOffset {}
#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum Op {
  Add = 0,
  Subtract = 1,
  Multiply = 2,
  Divide = 3,

}

const ENUM_MIN_OP: i8 = 0;
const ENUM_MAX_OP: i8 = 3;

impl<'a> flatbuffers::Follow<'a> for Op {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for Op {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const Op;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const Op;
    unsafe { *p }
  }
}

impl flatbuffers::Push for Op {
    type Output = Op;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<Op>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_OP:[Op; 4] = [
  Op::Add,
  Op::Subtract,
  Op::Multiply,
  Op::Divide
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_OP:[&'static str; 4] = [
    "Add",
    "Subtract",
    "Multiply",
    "Divide"
];

pub fn enum_name_op(e: Op) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_OP[index as usize]
}

pub enum BinOpOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct BinOp<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BinOp<'a> {
    type Inner = BinOp<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> BinOp<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BinOp {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BinOpArgs) -> flatbuffers::WIPOffset<BinOp<'bldr>> {
      let mut builder = BinOpBuilder::new(_fbb);
      if let Some(x) = args.rhs { builder.add_rhs(x); }
      if let Some(x) = args.lhs { builder.add_lhs(x); }
      builder.add_op(args.op);
      builder.add_rhs_type(args.rhs_type);
      builder.add_lhs_type(args.lhs_type);
      builder.finish()
    }

    pub const VT_LHS_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_LHS: flatbuffers::VOffsetT = 6;
    pub const VT_RHS_TYPE: flatbuffers::VOffsetT = 8;
    pub const VT_RHS: flatbuffers::VOffsetT = 10;
    pub const VT_OP: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn lhs_type(&self) -> Node {
    self._tab.get::<Node>(BinOp::VT_LHS_TYPE, Some(Node::NONE)).unwrap()
  }
  #[inline]
  pub fn lhs(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BinOp::VT_LHS, None)
  }
  #[inline]
  pub fn rhs_type(&self) -> Node {
    self._tab.get::<Node>(BinOp::VT_RHS_TYPE, Some(Node::NONE)).unwrap()
  }
  #[inline]
  pub fn rhs(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(BinOp::VT_RHS, None)
  }
  #[inline]
  pub fn op(&self) -> Op {
    self._tab.get::<Op>(BinOp::VT_OP, Some(Op::Add)).unwrap()
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn lhs_as_bin_op(&self) -> Option<BinOp<'a>> {
    if self.lhs_type() == Node::BinOp {
      self.lhs().map(|u| BinOp::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn lhs_as_constant(&self) -> Option<Constant<'a>> {
    if self.lhs_type() == Node::Constant {
      self.lhs().map(|u| Constant::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn rhs_as_bin_op(&self) -> Option<BinOp<'a>> {
    if self.rhs_type() == Node::BinOp {
      self.rhs().map(|u| BinOp::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn rhs_as_constant(&self) -> Option<Constant<'a>> {
    if self.rhs_type() == Node::Constant {
      self.rhs().map(|u| Constant::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct BinOpArgs {
    pub lhs_type: Node,
    pub lhs: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub rhs_type: Node,
    pub rhs: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub op: Op,
}
impl<'a> Default for BinOpArgs {
    #[inline]
    fn default() -> Self {
        BinOpArgs {
            lhs_type: Node::NONE,
            lhs: None,
            rhs_type: Node::NONE,
            rhs: None,
            op: Op::Add,
        }
    }
}
pub struct BinOpBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BinOpBuilder<'a, 'b> {
  #[inline]
  pub fn add_lhs_type(&mut self, lhs_type: Node) {
    self.fbb_.push_slot::<Node>(BinOp::VT_LHS_TYPE, lhs_type, Node::NONE);
  }
  #[inline]
  pub fn add_lhs(&mut self, lhs: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BinOp::VT_LHS, lhs);
  }
  #[inline]
  pub fn add_rhs_type(&mut self, rhs_type: Node) {
    self.fbb_.push_slot::<Node>(BinOp::VT_RHS_TYPE, rhs_type, Node::NONE);
  }
  #[inline]
  pub fn add_rhs(&mut self, rhs: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BinOp::VT_RHS, rhs);
  }
  #[inline]
  pub fn add_op(&mut self, op: Op) {
    self.fbb_.push_slot::<Op>(BinOp::VT_OP, op, Op::Add);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BinOpBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BinOpBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BinOp<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ConstantOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Constant<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Constant<'a> {
    type Inner = Constant<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Constant<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Constant {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ConstantArgs) -> flatbuffers::WIPOffset<Constant<'bldr>> {
      let mut builder = ConstantBuilder::new(_fbb);
      builder.add_value(args.value);
      builder.finish()
    }

    pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn value(&self) -> f64 {
    self._tab.get::<f64>(Constant::VT_VALUE, Some(0.0)).unwrap()
  }
}

pub struct ConstantArgs {
    pub value: f64,
}
impl<'a> Default for ConstantArgs {
    #[inline]
    fn default() -> Self {
        ConstantArgs {
            value: 0.0,
        }
    }
}
pub struct ConstantBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ConstantBuilder<'a, 'b> {
  #[inline]
  pub fn add_value(&mut self, value: f64) {
    self.fbb_.push_slot::<f64>(Constant::VT_VALUE, value, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ConstantBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ConstantBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Constant<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum RootOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Root<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Root<'a> {
    type Inner = Root<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Root<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Root {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RootArgs) -> flatbuffers::WIPOffset<Root<'bldr>> {
      let mut builder = RootBuilder::new(_fbb);
      if let Some(x) = args.expr { builder.add_expr(x); }
      builder.add_expr_type(args.expr_type);
      builder.finish()
    }

    pub const VT_EXPR_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_EXPR: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn expr_type(&self) -> Node {
    self._tab.get::<Node>(Root::VT_EXPR_TYPE, Some(Node::NONE)).unwrap()
  }
  #[inline]
  pub fn expr(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Root::VT_EXPR, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn expr_as_bin_op(&self) -> Option<BinOp<'a>> {
    if self.expr_type() == Node::BinOp {
      self.expr().map(|u| BinOp::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn expr_as_constant(&self) -> Option<Constant<'a>> {
    if self.expr_type() == Node::Constant {
      self.expr().map(|u| Constant::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct RootArgs {
    pub expr_type: Node,
    pub expr: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for RootArgs {
    #[inline]
    fn default() -> Self {
        RootArgs {
            expr_type: Node::NONE,
            expr: None,
        }
    }
}
pub struct RootBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RootBuilder<'a, 'b> {
  #[inline]
  pub fn add_expr_type(&mut self, expr_type: Node) {
    self.fbb_.push_slot::<Node>(Root::VT_EXPR_TYPE, expr_type, Node::NONE);
  }
  #[inline]
  pub fn add_expr(&mut self, expr: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Root::VT_EXPR, expr);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RootBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RootBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Root<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_root<'a>(buf: &'a [u8]) -> Root<'a> {
  flatbuffers::get_root::<Root<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_root<'a>(buf: &'a [u8]) -> Root<'a> {
  flatbuffers::get_size_prefixed_root::<Root<'a>>(buf)
}

#[inline]
pub fn finish_root_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Root<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_root_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Root<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod tree

