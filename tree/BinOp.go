// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tree

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BinOp struct {
	_tab flatbuffers.Table
}

func GetRootAsBinOp(buf []byte, offset flatbuffers.UOffsetT) *BinOp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BinOp{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BinOp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BinOp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BinOp) LhsType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BinOp) MutateLhsType(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *BinOp) Lhs(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *BinOp) RhsType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BinOp) MutateRhsType(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *BinOp) Rhs(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *BinOp) Op() Op {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BinOp) MutateOp(n Op) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func BinOpStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BinOpAddLhsType(builder *flatbuffers.Builder, lhsType byte) {
	builder.PrependByteSlot(0, lhsType, 0)
}
func BinOpAddLhs(builder *flatbuffers.Builder, lhs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(lhs), 0)
}
func BinOpAddRhsType(builder *flatbuffers.Builder, rhsType byte) {
	builder.PrependByteSlot(2, rhsType, 0)
}
func BinOpAddRhs(builder *flatbuffers.Builder, rhs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rhs), 0)
}
func BinOpAddOp(builder *flatbuffers.Builder, op int8) {
	builder.PrependInt8Slot(4, op, 0)
}
func BinOpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
